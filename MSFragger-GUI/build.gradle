/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    id 'idea'
    id 'edu.sc.seis.launch4j' version '2.4.4'

    id "com.jonaslasauskas.capsule" version "0.3.0"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.github.ben-manes.versions" version "0.20.0"
}

group = 'com.github.chhh'
version = '10.0-alpha-01'

description = """FragPipe - run complete proteomics analyses from the GUI"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// Define the main class for the application
def startClass = 'umich.msfragger.gui.MsFraggerGui'
mainClassName = "${startClass}"
application {
    mainClassName = "${startClass}"
}
//
//task createStartScripts(type: CreateStartScripts, group: 'release') {
//    outputDir = file('build/github-release')
//    mainClassName = 'umich.msfragger.gui.MsFraggerGui'
//    applicationName = 'FragPipe'
//    executableDir = './'
//    classpath = files("asd/FragPipe-${version}.jar")
//}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

// This is really the important part
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources', 'tools', 'src']
            excludes = ['*.java']
            //excludes = ['*.java', '*.jar']
        }
    }
    // add tests sources here (this project didn't have them!)
    test {
        java {
            srcDirs = ['test']
        }
    }
}

shadowJar {
    archiveBaseName = "${project.name}"
    archiveClassifier = ""
    minimize()
}

launch4j {
    mainClassName = "${startClass}"
    icon = "${projectDir}/../logo/msfragger-icon-set_win_16-512.ico"
    outputDir = 'libs'
    dontWrapJar = false
    downloadUrl = 'https://adoptopenjdk.net/'
    // messagesStartupError = "Startup error"
    // messagesLauncherError = "Launcher error"
    // messagesBundledJreError = "Error with bundled JRE"
    // messagesJreVersionError = "Java Runtime version error"
}

// replacing old transitive dependencies with newer ones
//configurations.each {
//    c -> c.resolutionStrategy.dependencySubstitution {
//        all { DependencySubstitution dep ->
//            if (dep.requested.group == 'io.reactivex' && dep.requested.module == 'rxjava') {
//                dep.useTarget 'io.reactivex:rxjava:1.3.8'
//            }
//        }
//    }
//}

dependencies {
    compile 'org.apache.httpcomponents:httpcore:4.4.11'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.7')
    compile 'commons-logging:commons-logging-api:1.1'
    
    compile 'org.apache.httpcomponents:httpmime:4.5.7'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    //compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile 'com.miglayout:miglayout-swing:5.2'

    compile ('io.reactivex:rxswing:0.27.0'){
        exclude group: 'io.reactivex', module: 'rxjava'
    }
    compile 'io.reactivex:rxjava:1.3.8'

    compile 'org.greenrobot:eventbus:3.1.1'
    compile 'org.jsoup:jsoup:1.11.3'

    // logging
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // downloaded / precompiled jars
    compile fileTree(dir: 'libs', include: '*.jar')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    //all*.exclude group: 'commons-codec', module: 'commons-codec'
}

capsule {
  capsuleManifest {
    applicationId = 'com.github.chhh.FragPipe'
    applicationClass = 'umich.msfragger.gui.MsFraggerGui'
  }
}

task listJars {
    doLast {
        configurations.compile.each { File file -> println file.name }
    }
}

task depsCompile(type: DependencyReportTask, group: 'help', description: "Show only compile time dependencies") {
    configurations = [project.configurations.compile] as Set
}

task releaseShadowJar(type: Copy, group: 'release') {
    dependsOn 'shadowJar'
    from "$buildDir/libs/FragPipe-${project.version}.jar"
    into file("$buildDir/github-release")
}

task copyShadowScripts(type: Copy, group: 'release') {
    dependsOn 'startShadowScripts'
    from "$buildDir/scriptsShadow"
    into file("$buildDir/pre-zip-release/bin")
}

task copyShadowJar(type: Copy, group: 'release') {
    dependsOn 'shadowJar'
    from "$buildDir/libs/FragPipe-${project.version}.jar"
    into file("$buildDir/pre-zip-release/lib")
}

//task releaseZipOld(type: Zip) {
//    dependsOn 'shadowDistZip'
//    archiveFileName = "FragPipe-${project.version}.zip"
//    destinationDirectory = file("$buildDir/github-release")
//    from "$buildDir/scriptsShadow"
//    from "$buildDir/libs/FragPipe-${project.version}.jar"
//}

task releaseZip(type: Zip, group: 'release') {
    dependsOn 'copyShadowJar'
    dependsOn 'copyShadowScripts'
    //dependsOn 'createStartScripts'
    archiveFileName = "FragPipe-${project.version}.zip"
    destinationDirectory = file("$buildDir/github-release")
    from "$buildDir/pre-zip-release"
}

task releaseWinExe(type: Copy, group: 'release') {
    dependsOn 'createExe'
    from "$buildDir/libs/FragPipe.exe"
    into file("$buildDir/github-release")
}

task prepareReleaseNoExe(group: 'release') {
    dependsOn 'clean'
    dependsOn 'releaseShadowJar'
    dependsOn 'releaseZip'
    tasks.findByName('releaseShadowJar').mustRunAfter 'clean'
    tasks.findByName('releaseZip').mustRunAfter 'releaseShadowJar'
}

task prepareReleaseWithExe(group: 'release') {
    dependsOn 'prepareReleaseNoExe'
    dependsOn 'releaseWinExe'
    tasks.findByName('releaseWinExe').mustRunAfter 'prepareReleaseNoExe'
}

task createStartScripts(type: CreateStartScripts, group: "release") {
    outputDir = file('build/pre-zip-release')
    mainClassName = "${startClass}"
    applicationName = 'FragPipe'
    classpath = files("FragPipe-${project.version}.jar")
}
